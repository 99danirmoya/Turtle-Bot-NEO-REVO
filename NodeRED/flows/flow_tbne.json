[
    {
        "id": "e10512964d02b8d1",
        "type": "tab",
        "label": "Turtle-Bot NEO EVO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "97ba7b2eef65a7a4",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "GRAPHS",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "a7b51f135d5c5116",
            "b0bd3a143432ab15",
            "af8cab45119c5c38",
            "1fa7c31589278ce4",
            "c820c8697f56eb2d",
            "b8b000c948923875",
            "9031eaa2c9c10b89",
            "696016efb6499aad",
            "c29532ea624f1365",
            "4fe522f2a0c60a1d",
            "d57f3cc7ed8005de",
            "9d63d1eb2b2338af",
            "427c0907ef448cf8",
            "700d196682be9bb9",
            "84c1735d0a1c62d3"
        ],
        "x": 594,
        "y": 79,
        "w": 392,
        "h": 442
    },
    {
        "id": "73a5a46d1e3f310a",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "MQTT RAW DATA (PUB)",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#6f2fa0"
        },
        "nodes": [
            "7be1e7d9bc4abcbd",
            "f1f029b75c6aa376"
        ],
        "x": 74,
        "y": 559,
        "w": 212,
        "h": 122
    },
    {
        "id": "e4836e3695a44c43",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "VARIABLE DIVIDER",
        "style": {
            "stroke": "#ffff00",
            "fill": "#ffffbf",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#ffC000"
        },
        "nodes": [
            "7d6b6271d7fead27",
            "e61f451c22c0718d"
        ],
        "x": 334,
        "y": 559,
        "w": 232,
        "h": 122
    },
    {
        "id": "7f9bc233153f0d1f",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "VARIABLE FILTER AND FUNCTIONS",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#ffC000"
        },
        "nodes": [
            "436eae528d211a05",
            "2fca88d03f90b418"
        ],
        "x": 594,
        "y": 539,
        "w": 252,
        "h": 157
    },
    {
        "id": "988c1af445514bf4",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "TAB BUTTONS",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#ff0000"
        },
        "nodes": [
            "43b073139083e6a8",
            "39626645edc8c6e4",
            "7cf64b1f6d1f3b80",
            "366e657c95ef5d0b"
        ],
        "x": 694,
        "y": 1059,
        "w": 412,
        "h": 142
    },
    {
        "id": "3c1067f2e19209cb",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "DASHBOARD CONTROLS (SUB)",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "17ea01385589bb15",
            "3e133d6d82125cf0",
            "578a4c895717d05f",
            "869c9c9830ef4bfa",
            "edfd3743f0c646fc",
            "3792d88cca986e4a",
            "a6a0efa55af3a68b",
            "5ad532c6241ac68f",
            "7057f82a0cb00166",
            "91b2e810691b9fe1",
            "b81711550d6d677c",
            "87f061bfeb25876e",
            "40f66fbe6f89a004",
            "0f917c92f1a9db5a",
            "6198db81c90ffc53",
            "cc35747daa9d3d6e"
        ],
        "x": 74,
        "y": 719,
        "w": 592,
        "h": 422
    },
    {
        "id": "12b53ce8d9b5fa8f",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "DATABASE OUT",
        "style": {
            "stroke": "#783f04",
            "label": true,
            "fill": "#a6621c",
            "fill-opacity": "0.6",
            "color": "#783f04"
        },
        "nodes": [
            "88e15c39a8d15a16"
        ],
        "x": 1014,
        "y": 579,
        "w": 152,
        "h": 82
    },
    {
        "id": "88201f95ab40077f",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "TELEGRAM INLINE KEYBOARD",
        "style": {
            "stroke": "#0070c0",
            "fill": "#3f93cf",
            "label": true,
            "color": "#ffffff",
            "fill-opacity": "0.4"
        },
        "nodes": [
            "8816ade92ecd7b44",
            "ba74a789137a6589",
            "f66b2a17b090f64e",
            "9aef92fa47b8a7ec",
            "729eab0732578647",
            "6f3b801b0782a02f",
            "8c20edbc0aefd390",
            "6125fd0822f4cf74",
            "7a9fb5cf5a82ebff",
            "6cbb452a8fe25272",
            "dc8886abd1562e6a",
            "b386ac0959ae1030",
            "fefa118b16ca4ef2",
            "996a6553ce47c9f8",
            "56b568556fc8663a"
        ],
        "x": 694,
        "y": 719,
        "w": 862,
        "h": 324.5
    },
    {
        "id": "f11f87d50b5afc16",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "NOTIFICATION ALERTS",
        "style": {
            "fill": "#d1d1d1",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#3f3f3f"
        },
        "nodes": [
            "ddc2083f09757c9e",
            "73200220a268ecc5",
            "446bf5e711b18daf"
        ],
        "x": 1014,
        "y": 379,
        "w": 432,
        "h": 142
    },
    {
        "id": "c0475ec6b66584ad",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "INJECT TESTS",
        "style": {
            "stroke": "#7fb7df",
            "fill": "#bfdbef",
            "fill-opacity": "0.5",
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "4245e935558d3932",
            "229fa341411cfc79",
            "a48eed6aa7b37fbb",
            "62903683c7110bbc",
            "305a96c1409eb302"
        ],
        "x": 334,
        "y": 299,
        "w": 192,
        "h": 242
    },
    {
        "id": "8987662861fe1e56",
        "type": "group",
        "z": "e10512964d02b8d1",
        "name": "Worldmap",
        "style": {
            "stroke": "#92d04f",
            "fill": "#3f93cf",
            "fill-opacity": "0.6",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "8df95ea91fa13b2a",
            "53a2cb3b4ec74e5a"
        ],
        "x": 1014,
        "y": 279,
        "w": 312,
        "h": 82
    },
    {
        "id": "7be1e7d9bc4abcbd",
        "type": "mqtt in",
        "z": "e10512964d02b8d1",
        "g": "73a5a46d1e3f310a",
        "name": "",
        "topic": "moya/sensores",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "8683a4e5f3bd2120",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 640,
        "wires": [
            [
                "f1f029b75c6aa376",
                "7d6b6271d7fead27"
            ]
        ]
    },
    {
        "id": "f1f029b75c6aa376",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "73a5a46d1e3f310a",
        "name": "debug raw",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 600,
        "wires": []
    },
    {
        "id": "7d6b6271d7fead27",
        "type": "csv",
        "z": "e10512964d02b8d1",
        "g": "e4836e3695a44c43",
        "name": "variable separator",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "temperatura,presion,altitud,humedad,bateria",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 450,
        "y": 640,
        "wires": [
            [
                "e61f451c22c0718d",
                "2fca88d03f90b418",
                "a7b51f135d5c5116",
                "b0bd3a143432ab15",
                "af8cab45119c5c38",
                "1fa7c31589278ce4",
                "b8b000c948923875",
                "9031eaa2c9c10b89",
                "696016efb6499aad",
                "c29532ea624f1365",
                "427c0907ef448cf8",
                "700d196682be9bb9"
            ]
        ]
    },
    {
        "id": "436eae528d211a05",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "7f9bc233153f0d1f",
        "name": "debug filtro influx",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "2fca88d03f90b418",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "7f9bc233153f0d1f",
        "name": "filter + functions",
        "func": "// VARIABLES =============================================================\n// Variables enviadas por el sensor desde The Things Network\nvar temperatura = msg.payload.temperatura;\nvar presion = msg.payload.presion;\nvar altitud = msg.payload.altitud;\nvar humedad = msg.payload.humedad;\nvar bateria = msg.payload.bateria;\n//var lat = msg.payload.lat;\nvar lat = Math.random() * (43.5661 - 43.5361) + 43.5361;                                                                                    // Placeholder de latitud hasta incluir un GPS\n//var lon = msg.payload.lon;\nvar lon = Math.random() * (-5.8658 - (-5.9458)) + (-5.8658);                                                                                // Placeholder de longitud hasta incluir un GPS\nvar icon = \"fa-car\";                                                                                                                        // Variable para guardar la string que funciona como indicativo para el icono del hito del rover en el mapa\nvar iconColor = \"white\";                                                                                                                    // Variable para cambiar el icono del hito del rover en el mapa\n\n// Variable para el estado de la batería. 0 no hay notificación, 1 batería baja, 2 batería cargada\nvar lastBatteryNotification = context.get('lastBatteryNotification') || 0;\n\n// Array que acumula los mensajes para la concurrencia\nvar notifications = [];\n// =======================================================================\n\n// EVALUACIONES DE NOTIFICACION ==========================================\n// Comprueba estado de batería baja sólo si no se ha notificado recientemente\nif (lastBatteryNotification !== 1 && bateria < 3.0) {\n    notifications.push(`¡BATERÍA BAJA! \\u26A0\\n-------------------------------\\nVoltaje de ${bateria} V\\nPor favor, conecte un cargador`);  // El metodo push añade (y acumula) el texto al array 'notifications'\n    lastBatteryNotification = 1;                                                                                                            // Activa el estado de batería baja\n}\n\n// Comprueba estado de batería cargada sólo si no se ha notificado recientemente\nif (lastBatteryNotification !== 2 && bateria > 4.2) {\n    notifications.push(`¡BATERÍA CARGADA! \\u26A1\\n-------------------------------\\nVoltaje de ${bateria} V\\nPor favor, desconecte el cargador`);\n    lastBatteryNotification = 2;                                                                                                            // Activa el estado de batería cargada\n}\n\n// Actualizar con el nuevo estado de la batería\ncontext.set('lastBatteryNotification', lastBatteryNotification);\n\nif (temperatura >= 30 && humedad < 30) {\n    notifications.push(`¡TEMPERATURA ALTA!\\n-------------------------------\\nLa temperatura es de ${temperatura} ºC`);\n}\n\nif (temperatura <= 10 && humedad > 60) {\n    notifications.push(`¡CLIMA FRESCO! \\u2614\\n-------------------------------\\nLa temperatura es de ${temperatura} ºC\\ny la humedad es del ${humedad} %`);\n}\n// =======================================================================\n\n// CONSTRUCCION DEL MENSAJE A INFLUXDB ===================================\nvar msgInfluxdb = {\n    payload: { temperatura: temperatura, presion: presion, altitud: altitud, humedad: humedad }\n};\n// =======================================================================\n\n// CONSTRUCCION DEL MENSAJE A TTS ========================================\nvar msgTTS = {\n    payload: notifications.join('\\n\\n')\n};\n// =======================================================================\n\n// CONSTRUCCION DEL MENSAJE A TELEGRAM ===================================\nvar msgTelegram = {\n    payload: {\n        \"chatId\": 6188995795,\n        \"type\": \"message\",\n        \"content\": notifications.join('\\n\\n'),                                                                                              // Juntar y enviar los mensajes acumulados (o el único en caso de solo haber uno) con una linea en blanco entre ellos\n    }\n};\n// =======================================================================\n\n// CONSTRUCCION DE LAS COORDENADAS A WORLDMAP ===================================\nvar msgWorldmap = {\n    payload: msg.payload = { \"name\":\"Turtle-Bot NEO EVO\", \"lat\":lat, \"lon\":lon, \"icon\":icon, \"iconColor\":iconColor }                                                                                           // Juntar y enviar los mensajes acumulados (o el único en caso de solo haber uno) con una linea en blanco entre ellos\n};\n// =======================================================================\n\n// MENSAJES ==============================================================\nreturn [msgInfluxdb, msgTTS, msgTelegram, msgWorldmap];\n// =======================================================================",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 640,
        "wires": [
            [
                "436eae528d211a05"
            ],
            [
                "446bf5e711b18daf"
            ],
            [
                "ddc2083f09757c9e"
            ],
            [
                "8df95ea91fa13b2a"
            ]
        ]
    },
    {
        "id": "e61f451c22c0718d",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "e4836e3695a44c43",
        "name": "debug payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 600,
        "wires": []
    },
    {
        "id": "b8b000c948923875",
        "type": "change",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.temperatura",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 120,
        "wires": [
            [
                "c820c8697f56eb2d"
            ]
        ]
    },
    {
        "id": "9031eaa2c9c10b89",
        "type": "change",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.presion",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 160,
        "wires": [
            [
                "4fe522f2a0c60a1d"
            ]
        ]
    },
    {
        "id": "696016efb6499aad",
        "type": "change",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.altitud",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 200,
        "wires": [
            [
                "d57f3cc7ed8005de"
            ]
        ]
    },
    {
        "id": "c29532ea624f1365",
        "type": "change",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.humedad",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 240,
        "wires": [
            [
                "9d63d1eb2b2338af"
            ]
        ]
    },
    {
        "id": "3e133d6d82125cf0",
        "type": "mqtt out",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "topic": "moya/luces",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8683a4e5f3bd2120",
        "x": 370,
        "y": 800,
        "wires": []
    },
    {
        "id": "578a4c895717d05f",
        "type": "mqtt out",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "topic": "moya/oled",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8683a4e5f3bd2120",
        "x": 370,
        "y": 900,
        "wires": []
    },
    {
        "id": "3792d88cca986e4a",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "joystick axes",
        "func": "var x_axis = String(Math.round(msg.payload.vector.x * 100));\nvar y_axis = String(Math.round(msg.payload.vector.y * 100));\n\nvar msgXaxis = {\n    payload : x_axis \n};\n\nvar msgYaxis = {\n    payload: y_axis\n};\n\nreturn [msgXaxis, msgYaxis];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "a6a0efa55af3a68b"
            ],
            [
                "5ad532c6241ac68f"
            ]
        ]
    },
    {
        "id": "a6a0efa55af3a68b",
        "type": "mqtt out",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "topic": "moya/xAxis",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8683a4e5f3bd2120",
        "x": 570,
        "y": 960,
        "wires": []
    },
    {
        "id": "5ad532c6241ac68f",
        "type": "mqtt out",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "topic": "moya/yAxis",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8683a4e5f3bd2120",
        "x": 570,
        "y": 1040,
        "wires": []
    },
    {
        "id": "91b2e810691b9fe1",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "function audio OLED",
        "func": "var stateOLED = msg.payload;\n\nif (stateOLED === \"onOLED\") {\n    msg.payload = \"Encendiendo panel OLED\";\n} else if (stateOLED === \"offOLED\") {\n    msg.payload = \"Apagando panel OLED\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 860,
        "wires": [
            [
                "87f061bfeb25876e"
            ]
        ]
    },
    {
        "id": "b81711550d6d677c",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "function audio RGB",
        "func": "var stateRGB = msg.payload;\n\nif(stateRGB === \"on\"){\n    msg.payload = \"Encendiendo luces\";\n}else if(stateRGB === \"off\"){\n    msg.payload = \"Apagando luces\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 760,
        "wires": [
            [
                "7057f82a0cb00166"
            ]
        ]
    },
    {
        "id": "40f66fbe6f89a004",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "joy",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 960,
        "wires": []
    },
    {
        "id": "8816ade92ecd7b44",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 760,
        "wires": []
    },
    {
        "id": "ba74a789137a6589",
        "type": "catch",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 780,
        "y": 760,
        "wires": [
            [
                "8816ade92ecd7b44"
            ]
        ]
    },
    {
        "id": "f66b2a17b090f64e",
        "type": "comment",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "Inline Telegram Keyboard Light Control",
        "info": "Created by Alex Trostle",
        "x": 1150,
        "y": 760,
        "wires": []
    },
    {
        "id": "729eab0732578647",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "initial inline keyboard",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n\nvar opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"LED\",\n                    \"callback_data\": \"Bedside Lamp\"            \n                }, \n                {\n                    \"text\": \"OLED\",\n                    \"callback_data\": \"Door Lamp\"            \n                }]\n            ]\n  })\n};\n\nmsg.payload.content = '¿Qué dispositivo quieres encender/apagar?';\nmsg.payload.options = opts;\n\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 800,
        "wires": [
            [
                "9aef92fa47b8a7ec"
            ]
        ]
    },
    {
        "id": "8c20edbc0aefd390",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "save messageId",
        "func": "// We store the messageId to be able to edit this reply in the callback query. \ncontext.global.keyboard.messageId = msg.payload.sentMessageId;\ncontext.global.callbackNumber = 1;\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "7a9fb5cf5a82ebff",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "evaluate callback query",
        "func": "// This is a sample switch to demonstrate the handling of the user input.\nif(context.global.callbackNumber != 1){\n    return;\n}\nif(msg.payload.content === \"Turn on\")\n{\n    // Hide the keyboard and forget the messageId\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.global.keyboard.messageId\n    context.global.keyboard.messageId = null;\n    context.global.callbackNumber = null;\n    msg.topic = 'turn on';\n    // You could also send a editMessageReplyMarkup with an empty reply_markup here\n    return [ null, null, msg, null, null ];\n}\nelse if(msg.payload.content === \"Turn off\")\n{\n    // Hide the keyboard and forget the messageId\n    msg.payload.type = 'deleteMessage';\n    msg.payload.content = context.global.keyboard.messageId\n    context.global.keyboard.messageId = null;\n    context.global.callbackNumber = null;\n    msg.topic = 'turn off';\n    // You could also send a editMessageReplyMarkup with an empty reply_markup here\n    return [ null, msg, null, null, null ];\n}\nelse if(msg.payload.content === \"Bedside Lamp\")\n{\n    // we don't want to clear the message yet, we need another answer\n    msg.topic = 'bedside lamp';\n    return [ null, null, null, null, msg ];\n}\nelse if(msg.payload.content === \"Door Lamp\")\n{\n    // we don't want to clear the message yet, we need another answer\n    msg.topic = 'door lamp';\n    return [ null, null, null, msg, null ];\n}\nelse\n{\n    var show_alert = false; // you can set this to true to open a dialog with the answer in the client.\n    \n    // msg.payload.content contains the callback data from the keyboard.\n    // You may change this value here.\n    msg.payload.options = show_alert;\n    \n    return [ msg, null, null, null, null ];\n}",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 980,
        "wires": [
            [
                "6cbb452a8fe25272",
                "b386ac0959ae1030"
            ],
            [
                "6cbb452a8fe25272",
                "b386ac0959ae1030"
            ],
            [
                "6cbb452a8fe25272",
                "b386ac0959ae1030"
            ],
            [
                "b386ac0959ae1030"
            ],
            [
                "b386ac0959ae1030"
            ]
        ]
    },
    {
        "id": "dc8886abd1562e6a",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "edit inline keyboard",
        "func": "if(context.global.callbackNumber != 1){\n    return;\n}\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Encender\",\n                    \"callback_data\": \"Turn on\"            \n                }, \n                {\n                    \"text\": \"Apagar\",\n                    \"callback_data\": \"Turn off\"            \n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];\n",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 860,
        "wires": [
            [
                "6cbb452a8fe25272"
            ]
        ]
    },
    {
        "id": "b386ac0959ae1030",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "Data -> information",
        "func": "//[bed, door, on, off]\nif (msg.topic === 'bedside lamp'){\n    msg = {payload: 'bed'};\n    return msg;\n}\nelse if (msg.topic === 'door lamp'){\n    msg = {payload: 'door'};\n    return msg;\n}\nelse if (msg.topic === 'turn on'){\n    msg = {payload: 'on'};\n    return msg;\n}\nelse if (msg.topic === 'turn off'){\n    msg = {payload: 'off'};\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 980,
        "wires": [
            [
                "fefa118b16ca4ef2"
            ]
        ]
    },
    {
        "id": "fefa118b16ca4ef2",
        "type": "join",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "Join selections",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "20",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1440,
        "y": 980,
        "wires": [
            [
                "996a6553ce47c9f8"
            ]
        ]
    },
    {
        "id": "996a6553ce47c9f8",
        "type": "function",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "determine action",
        "func": "if(msg.payload[0] === 'bed' && msg.payload[1] === 'off'){\n    msg.topic = 'moya/luces';\n    msg.payload = 'off';//a 1 turns off ESP32 #13 relay\n    return [msg, null];\n}\nelse if(msg.payload[0] === 'bed' && msg.payload[1] === 'on'){\n    msg.topic = 'moya/luces';\n    msg.payload = 'on';//a 0 turns on ESP32 #13 relay\n    return [msg, null];\n}\nelse if(msg.payload[0] === 'door' && msg.payload[1] === 'off'){\n    msg.topic = 'moya/oled';\n    msg.payload = 'offOLED';//a 1 turns off ESP32 #10 relay\n    return [null, msg];\n}\nelse if(msg.payload[0] === 'door' && msg.payload[1] === 'on'){\n    msg.topic = 'moya/oled';\n    msg.payload = 'onOLED';//a 0 turns on ESP32 #10 relay\n    return [null, msg];\n}\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 920,
        "wires": [
            [
                "56b568556fc8663a"
            ],
            [
                "56b568556fc8663a"
            ]
        ]
    },
    {
        "id": "56b568556fc8663a",
        "type": "mqtt out",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "mqtt out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8683a4e5f3bd2120",
        "x": 1420,
        "y": 920,
        "wires": []
    },
    {
        "id": "700d196682be9bb9",
        "type": "change",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.bateria",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 280,
        "wires": [
            [
                "84c1735d0a1c62d3"
            ]
        ]
    },
    {
        "id": "73200220a268ecc5",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "f11f87d50b5afc16",
        "name": "debug telegram",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 480,
        "wires": []
    },
    {
        "id": "4245e935558d3932",
        "type": "inject",
        "z": "e10512964d02b8d1",
        "g": "c0475ec6b66584ad",
        "name": "Inject 2.7",
        "props": [
            {
                "p": "payload.bateria",
                "v": "2.7",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 340,
        "wires": [
            [
                "2fca88d03f90b418"
            ]
        ]
    },
    {
        "id": "229fa341411cfc79",
        "type": "inject",
        "z": "e10512964d02b8d1",
        "g": "c0475ec6b66584ad",
        "name": "Inject 3.7",
        "props": [
            {
                "p": "payload.bateria",
                "v": "3.7",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 380,
        "wires": [
            [
                "2fca88d03f90b418"
            ]
        ]
    },
    {
        "id": "a48eed6aa7b37fbb",
        "type": "inject",
        "z": "e10512964d02b8d1",
        "g": "c0475ec6b66584ad",
        "name": "Inject p1",
        "props": [
            {
                "p": "payload.lat",
                "v": "43.564237",
                "vt": "num"
            },
            {
                "p": "payload.lon",
                "v": "-5.934862",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 460,
        "wires": [
            [
                "2fca88d03f90b418"
            ]
        ]
    },
    {
        "id": "6198db81c90ffc53",
        "type": "mqtt out",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "topic": "moya/claxon",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8683a4e5f3bd2120",
        "x": 570,
        "y": 1100,
        "wires": []
    },
    {
        "id": "cc35747daa9d3d6e",
        "type": "debug",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "debug claxon",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1060,
        "wires": []
    },
    {
        "id": "43b073139083e6a8",
        "type": "ui_button",
        "z": "e10512964d02b8d1",
        "g": "988c1af445514bf4",
        "name": "",
        "group": "f299af042ed014a8",
        "order": 1,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "CHARTS BME",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-database",
        "payload": "CHARTS BME",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 800,
        "y": 1100,
        "wires": [
            [
                "39626645edc8c6e4"
            ]
        ]
    },
    {
        "id": "7cf64b1f6d1f3b80",
        "type": "ui_button",
        "z": "e10512964d02b8d1",
        "g": "988c1af445514bf4",
        "name": "",
        "group": "6b7057ad36d47009",
        "order": 1,
        "width": 20,
        "height": 1,
        "passthru": false,
        "label": "TURTLE-BOT NEO EVO",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "TURTLE-BOT NEO EVO",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 830,
        "y": 1160,
        "wires": [
            [
                "366e657c95ef5d0b"
            ]
        ]
    },
    {
        "id": "0f917c92f1a9db5a",
        "type": "ui_button",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "group": "f299af042ed014a8",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Claxon",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-bullhorn",
        "payload": "moc",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 1100,
        "wires": [
            [
                "6198db81c90ffc53",
                "cc35747daa9d3d6e"
            ]
        ]
    },
    {
        "id": "17ea01385589bb15",
        "type": "ui_switch",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "label": "ON/OFF RGB",
        "tooltip": "",
        "group": "f299af042ed014a8",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "blue",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "gray",
        "animate": true,
        "className": "",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "3e133d6d82125cf0",
                "b81711550d6d677c"
            ]
        ]
    },
    {
        "id": "869c9c9830ef4bfa",
        "type": "ui_switch",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "label": "ON/OFF OLED",
        "tooltip": "",
        "group": "f299af042ed014a8",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "onOLED",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "offOLED",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 180,
        "y": 900,
        "wires": [
            [
                "578a4c895717d05f",
                "91b2e810691b9fe1"
            ]
        ]
    },
    {
        "id": "a7b51f135d5c5116",
        "type": "ui_gauge",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "b7af2acbd35f2c4c",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "donut",
        "title": "Altitud",
        "label": "m",
        "format": "{{payload.altitud}}",
        "min": "-50",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 670,
        "y": 400,
        "wires": []
    },
    {
        "id": "b0bd3a143432ab15",
        "type": "ui_gauge",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "3662aad0e555f496",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Presión",
        "label": "hPa",
        "format": "{{payload.presion}}",
        "min": 0,
        "max": "1700",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 360,
        "wires": []
    },
    {
        "id": "af8cab45119c5c38",
        "type": "ui_gauge",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "b60dfa0deef6eb6b",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "compass",
        "title": "Temperatura",
        "label": "ºC",
        "format": "{{payload.temperatura}}",
        "min": "-20",
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "1fa7c31589278ce4",
        "type": "ui_gauge",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "593a64bc276531fb",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "wave",
        "title": "Humedad",
        "label": "%",
        "format": "{{payload.humedad}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 440,
        "wires": []
    },
    {
        "id": "427c0907ef448cf8",
        "type": "ui_gauge",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "a2d48eef75464788",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Batería",
        "label": "%",
        "format": "{{payload.bateria}}",
        "min": "2.0",
        "max": "5.0",
        "colors": [
            "#e30202",
            "#e6e600",
            "#38cb1a"
        ],
        "seg1": "3.0",
        "seg2": "4.0",
        "diff": false,
        "className": "",
        "x": 680,
        "y": 480,
        "wires": []
    },
    {
        "id": "c820c8697f56eb2d",
        "type": "ui_chart",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "6b7057ad36d47009",
        "order": 2,
        "width": 7,
        "height": 8,
        "label": "Temperatura",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff8800",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4fe522f2a0c60a1d",
        "type": "ui_chart",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "6b7057ad36d47009",
        "order": 3,
        "width": 6,
        "height": 8,
        "label": "Presión",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#9e9e9e",
            "#aec7e8",
            "#fa8a29",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d57f3cc7ed8005de",
        "type": "ui_chart",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "6b7057ad36d47009",
        "order": 5,
        "width": 10,
        "height": 8,
        "label": "Altitud",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a8dbff",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9d63d1eb2b2338af",
        "type": "ui_chart",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "6b7057ad36d47009",
        "order": 4,
        "width": 7,
        "height": 8,
        "label": "Humedad",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "84c1735d0a1c62d3",
        "type": "ui_chart",
        "z": "e10512964d02b8d1",
        "g": "97ba7b2eef65a7a4",
        "name": "",
        "group": "6b7057ad36d47009",
        "order": 6,
        "width": 10,
        "height": 8,
        "label": "Batería",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": false,
        "ymin": "2",
        "ymax": "5",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#db1414",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7057f82a0cb00166",
        "type": "ui_audio",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "group": "f299af042ed014a8",
        "voice": "Microsoft Alvaro Online (Natural) - Spanish (Spain)",
        "always": "",
        "x": 580,
        "y": 760,
        "wires": []
    },
    {
        "id": "87f061bfeb25876e",
        "type": "ui_audio",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "",
        "group": "f299af042ed014a8",
        "voice": "Microsoft Elvira Online (Natural) - Spanish (Spain)",
        "always": "",
        "x": 580,
        "y": 860,
        "wires": []
    },
    {
        "id": "446bf5e711b18daf",
        "type": "ui_audio",
        "z": "e10512964d02b8d1",
        "g": "f11f87d50b5afc16",
        "name": "",
        "group": "f299af042ed014a8",
        "voice": "Microsoft Alvaro Online (Natural) - Spanish (Spain)",
        "always": "",
        "x": 1100,
        "y": 420,
        "wires": []
    },
    {
        "id": "39626645edc8c6e4",
        "type": "ui_ui_control",
        "z": "e10512964d02b8d1",
        "g": "988c1af445514bf4",
        "name": "",
        "events": "all",
        "x": 1020,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "366e657c95ef5d0b",
        "type": "ui_ui_control",
        "z": "e10512964d02b8d1",
        "g": "988c1af445514bf4",
        "name": "",
        "events": "all",
        "x": 1020,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "6f3b801b0782a02f",
        "type": "telegram command",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "/neo2",
        "command": "/neo2",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "6e1cec36669ba530",
        "strict": false,
        "hasresponse": false,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 1,
        "x": 770,
        "y": 800,
        "wires": [
            [
                "729eab0732578647"
            ]
        ]
    },
    {
        "id": "6125fd0822f4cf74",
        "type": "telegram event",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "callback_query",
        "bot": "6e1cec36669ba530",
        "event": "callback_query",
        "autoanswer": true,
        "x": 800,
        "y": 900,
        "wires": [
            [
                "dc8886abd1562e6a",
                "7a9fb5cf5a82ebff"
            ]
        ],
        "info": "ALL CALL BACK QUERIES ARE READ BY\nALL CALL BACK QUERRY NODES. This means\nwhether you only need one callback_query\nfor all of NodeRED. You just have to sort them."
    },
    {
        "id": "9aef92fa47b8a7ec",
        "type": "telegram sender",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "show inline keyboard",
        "bot": "6e1cec36669ba530",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1220,
        "y": 800,
        "wires": [
            [
                "8c20edbc0aefd390"
            ]
        ]
    },
    {
        "id": "6cbb452a8fe25272",
        "type": "telegram sender",
        "z": "e10512964d02b8d1",
        "g": "88201f95ab40077f",
        "name": "answer callback query",
        "bot": "6e1cec36669ba530",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1220,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "ddc2083f09757c9e",
        "type": "telegram sender",
        "z": "e10512964d02b8d1",
        "g": "f11f87d50b5afc16",
        "name": "Sensor Sender",
        "bot": "6e1cec36669ba530",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1120,
        "y": 480,
        "wires": [
            [
                "73200220a268ecc5"
            ]
        ]
    },
    {
        "id": "edfd3743f0c646fc",
        "type": "ui_joystick",
        "z": "e10512964d02b8d1",
        "g": "3c1067f2e19209cb",
        "name": "JOYSTICK",
        "group": "314c2fca8587d2db",
        "order": 1,
        "width": 8,
        "height": 8,
        "trigger": "all",
        "timeInterval": "250",
        "useThemeColor": true,
        "color": "#000000",
        "threshold": 0.1,
        "directions": "all",
        "shape": "circle",
        "centerAtRelease": true,
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "3792d88cca986e4a",
                "40f66fbe6f89a004"
            ]
        ]
    },
    {
        "id": "8df95ea91fa13b2a",
        "type": "delay",
        "z": "e10512964d02b8d1",
        "g": "8987662861fe1e56",
        "name": "map delay",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "53a2cb3b4ec74e5a"
            ]
        ]
    },
    {
        "id": "62903683c7110bbc",
        "type": "inject",
        "z": "e10512964d02b8d1",
        "g": "c0475ec6b66584ad",
        "name": "Inject 2.7",
        "props": [
            {
                "p": "payload.bateria",
                "v": "2.7",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 420,
        "wires": [
            [
                "2fca88d03f90b418"
            ]
        ]
    },
    {
        "id": "305a96c1409eb302",
        "type": "inject",
        "z": "e10512964d02b8d1",
        "g": "c0475ec6b66584ad",
        "name": "Inject p2",
        "props": [
            {
                "p": "payload.lat",
                "v": "43.565196",
                "vt": "num"
            },
            {
                "p": "payload.lon",
                "v": "-5.944303",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 440,
        "y": 500,
        "wires": [
            [
                "2fca88d03f90b418"
            ]
        ]
    },
    {
        "id": "53a2cb3b4ec74e5a",
        "type": "ui_worldmap",
        "z": "e10512964d02b8d1",
        "g": "8987662861fe1e56",
        "group": "59a7e8723f564bbd",
        "order": 1,
        "width": 20,
        "height": 8,
        "name": "aviles",
        "lat": "43.536566",
        "lon": " -5.847738",
        "zoom": "11",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1250,
        "y": 320,
        "wires": []
    },
    {
        "id": "88e15c39a8d15a16",
        "type": "influxdb out",
        "z": "e10512964d02b8d1",
        "g": "12b53ce8d9b5fa8f",
        "influxdb": "60d0f0bbecaf9d67",
        "name": "db out",
        "measurement": "pruebas2",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "medialab",
        "bucket": "test",
        "x": 1090,
        "y": 620,
        "wires": []
    },
    {
        "id": "8683a4e5f3bd2120",
        "type": "mqtt-broker",
        "name": "EMQX",
        "broker": "broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "f299af042ed014a8",
        "type": "ui_group",
        "name": "RGB LED BLUE",
        "tab": "665c9c5fa761d49c",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6b7057ad36d47009",
        "type": "ui_group",
        "name": "CHART",
        "tab": "307af0009d2e59f6",
        "order": 1,
        "disp": false,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7af2acbd35f2c4c",
        "type": "ui_group",
        "name": "ALTITUD",
        "tab": "665c9c5fa761d49c",
        "order": 7,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3662aad0e555f496",
        "type": "ui_group",
        "name": "PRESION",
        "tab": "665c9c5fa761d49c",
        "order": 6,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b60dfa0deef6eb6b",
        "type": "ui_group",
        "name": "TEMPERATURA",
        "tab": "665c9c5fa761d49c",
        "order": 2,
        "disp": false,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "593a64bc276531fb",
        "type": "ui_group",
        "name": "HUMEDAD",
        "tab": "665c9c5fa761d49c",
        "order": 3,
        "disp": false,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a2d48eef75464788",
        "type": "ui_group",
        "name": "BATERÍA",
        "tab": "665c9c5fa761d49c",
        "order": 4,
        "disp": false,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6e1cec36669ba530",
        "type": "telegram bot",
        "botname": "Turtle Bot NEO2 Bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "314c2fca8587d2db",
        "type": "ui_group",
        "name": "CONTROLS",
        "tab": "665c9c5fa761d49c",
        "order": 5,
        "disp": false,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "59a7e8723f564bbd",
        "type": "ui_group",
        "name": "MAPA",
        "tab": "665c9c5fa761d49c",
        "order": 8,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "60d0f0bbecaf9d67",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://influxdb.medialab-iot.com",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "665c9c5fa761d49c",
        "type": "ui_tab",
        "name": "TURTLE-BOT NEO EVO",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "307af0009d2e59f6",
        "type": "ui_tab",
        "name": "CHARTS BME",
        "icon": "fa-database",
        "order": 8,
        "disabled": false,
        "hidden": false
    }
]